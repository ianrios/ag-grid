{"version":3,"sources":["reactUi/cellRenderer/detailCellRenderer.tsx"],"names":[],"mappings":"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","file":"detailCellRenderer.mjs","sourcesContent":["import React, { useState, useMemo, useRef, useContext, useCallback, forwardRef, useImperativeHandle } from \"react\";\nimport { CssClasses } from \"../utils\";\nimport { IDetailCellRenderer, IDetailCellRendererCtrl, IDetailCellRendererParams, GridOptions, GridApi, ColumnApi, ModuleRegistry, _ } from \"@ag-grid-community/core\";\nimport { BeansContext } from \"../beansContext\";\nimport { AgGridReactUi } from \"../agGridReactUi\";\n\nconst DetailCellRenderer = (props: IDetailCellRendererParams, ref: any) => {\n\n    const { ctrlsFactory, context, gridOptionsService, resizeObserverService, clientSideRowModel, serverSideRowModel } = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [gridCssClasses, setGridCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [detailGridOptions, setDetailGridOptions] = useState<GridOptions>();\n    const [detailRowData, setDetailRowData] = useState<any[]>();\n\n    const ctrlRef = useRef<IDetailCellRendererCtrl>();\n    const eGuiRef = useRef<HTMLDivElement | null>(null);\n\n    const resizeObserverDestroyFunc = useRef<() => void>();\n\n    const parentModules = useMemo(() => ModuleRegistry.__getGridRegisteredModules(props.api.getGridId()), [props]);\n    const topClassName = useMemo(() => cssClasses.toString() + ' ag-details-row', [cssClasses]);\n    const gridClassName = useMemo(() => gridCssClasses.toString() + ' ag-details-grid', [gridCssClasses]);\n\n    if (ref) {\n        useImperativeHandle(ref, () => ({\n            refresh() { return ctrlRef.current?.refresh() ?? false; }\n        }));\n    }\n\n    if (props.template) {\n        _.doOnce(() => console.warn('AG Grid: detailCellRendererParams.template is not supported by AG Grid React. To change the template, provide a Custom Detail Cell Renderer. See https://ag-grid.com/react-data-grid/master-detail-custom-detail/'), \"React_detailCellRenderer.template\");\n    }\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGuiRef.current = e;\n\n        if (!eGuiRef.current) {\n            context.destroyBean(ctrlRef.current);\n            if (resizeObserverDestroyFunc.current) {\n                resizeObserverDestroyFunc.current();\n            }\n            return;\n        }\n\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (name: string, on: boolean) => setCssClasses(prev => prev.setClass(name, on)),\n            addOrRemoveDetailGridCssClass: (name: string, on: boolean) => setGridCssClasses(prev => prev.setClass(name, on)),\n            setDetailGrid: gridOptions => setDetailGridOptions(gridOptions),\n            setRowData: rowData => setDetailRowData(rowData),\n            getGui: () => eGuiRef.current!\n        };\n\n        const ctrl = ctrlsFactory.getInstance('detailCellRenderer') as IDetailCellRendererCtrl;\n        if (!ctrl) { return; } // should never happen, means master/detail module not loaded\n        context.createBean(ctrl);\n\n        ctrl.init(compProxy, props);\n\n        ctrlRef.current = ctrl;\n\n        if (gridOptionsService.get('detailRowAutoHeight')) {\n            const checkRowSizeFunc = () => {\n                // when disposed, current is null, so nothing to do, and the resize observer will\n                // be disposed of soon\n                if (eGuiRef.current == null) { return; }\n\n                const clientHeight = eGuiRef.current.clientHeight;\n\n                // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n                // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n                // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n                // empty detail grid would still have some styling around it giving at least a few pixels.\n                if (clientHeight != null && clientHeight > 0) {\n                    // we do the update in a timeout, to make sure we are not calling from inside the grid\n                    // doing another update\n                    const updateRowHeightFunc = () => {\n                        props.node.setRowHeight(clientHeight);\n                        if (clientSideRowModel) {\n                            clientSideRowModel.onRowHeightChanged();\n                        } else if (serverSideRowModel) {\n                            serverSideRowModel.onRowHeightChanged();\n                        }\n                    };\n                    setTimeout(updateRowHeightFunc, 0);\n                }\n            };\n\n            resizeObserverDestroyFunc.current = resizeObserverService.observeResize(eGuiRef.current, checkRowSizeFunc);\n            checkRowSizeFunc();\n        }\n    }, []);\n\n    const setGridApi = useCallback((api: GridApi, columnApi: ColumnApi) => {\n        ctrlRef.current?.registerDetailWithMaster(api, columnApi)\n    }, []);\n\n    return (\n        <div className={topClassName} ref={setRef}>\n            {\n                detailGridOptions &&\n                <AgGridReactUi className={gridClassName} {...detailGridOptions} modules={parentModules} rowData={detailRowData} setGridApi={setGridApi} />\n            }\n        </div>\n    );\n};\n\nexport default forwardRef(DetailCellRenderer);\n"]}