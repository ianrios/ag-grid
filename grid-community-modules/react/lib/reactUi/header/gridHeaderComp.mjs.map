{"version":3,"sources":["reactUi/header/gridHeaderComp.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxF,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EACc,cAAc,GAClC,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AACtC,OAAO,sBAAsB,MAAM,0BAA0B,CAAC;AAE9D,MAAM,cAAc,GAAG,GAAG,EAAE;IAExB,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAa,GAAG,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC;IACjF,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,EAAU,CAAC;IAE/C,MAAM,EAAC,OAAO,EAAC,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;IAC3C,MAAM,IAAI,GAAG,MAAM,CAAwB,IAAI,CAAC,CAAC;IACjD,MAAM,WAAW,GAAG,MAAM,CAAwB,IAAI,CAAC,CAAC;IAExD,MAAM,MAAM,GAAG,WAAW,CAAC,CAAC,CAAiB,EAAE,EAAE;QAC7C,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,EAAE;YACJ,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,OAAQ,CAAC,CAAC;YAC1C,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;YAC3B,OAAO;SACV;QACD,MAAM,SAAS,GAAoB;YAC/B,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACjF,qBAAqB,EAAE,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC;SACrD,CAAC;QAEF,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;QAC/D,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACvE,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,SAAS,GAAG,OAAO,CAAE,GAAE,EAAE;QAC3B,IAAI,GAAG,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;QAChC,OAAO,YAAY,GAAG,GAAG,CAAC;IAC9B,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,MAAM,KAAK,GAAG,OAAO,CAAE,GAAE,EAAE,CAAC,CAAC;QACzB,MAAM,EAAE,MAAM;QACd,SAAS,EAAE,MAAM;KACpB,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEd,OAAO,CACH,6BAAK,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAC,cAAc;QACrE,oBAAC,sBAAsB,IAAC,MAAM,EAAE,MAAM,GAAI;QAC1C,oBAAC,sBAAsB,IAAC,MAAM,EAAE,IAAI,GAAG;QACvC,oBAAC,sBAAsB,IAAC,MAAM,EAAE,OAAO,GAAI,CACzC,CACT,CAAC;AACN,CAAC,CAAC;AAEF,eAAe,IAAI,CAAC,cAAc,CAAC,CAAC","file":"gridHeaderComp.mjs","sourcesContent":["import React, { memo, useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport {\n    IGridHeaderComp, GridHeaderCtrl,\n} from '@ag-grid-community/core';\nimport { CssClasses } from '../utils';\nimport HeaderRowContainerComp from './headerRowContainerComp';\n\nconst GridHeaderComp = () => {\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(() => new CssClasses());\n    const [height, setHeight] = useState<string>();\n\n    const {context} = useContext(BeansContext);\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const gridCtrlRef = useRef<GridHeaderCtrl | null>(null);\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!e) {\n            context.destroyBean(gridCtrlRef.current!);\n            gridCtrlRef.current = null;\n            return;\n        }\n        const compProxy: IGridHeaderComp = {\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setHeightAndMinHeight: height => setHeight(height)\n        };\n\n        gridCtrlRef.current = context.createBean(new GridHeaderCtrl());\n        gridCtrlRef.current.setComp(compProxy, eGui.current, eGui.current);\n    }, []);\n\n    const className = useMemo( ()=> {\n        let res = cssClasses.toString();\n        return 'ag-header ' + res;\n    }, [cssClasses]);\n\n    const style = useMemo( ()=> ({\n        height: height,\n        minHeight: height\n    }), [height]);\n\n    return (\n        <div ref={setRef} className={className} style={style} role=\"presentation\">\n            <HeaderRowContainerComp pinned={'left'} />\n            <HeaderRowContainerComp pinned={null}/>\n            <HeaderRowContainerComp pinned={'right'} />\n        </div>\n    );\n};\n\nexport default memo(GridHeaderComp);\n"]}