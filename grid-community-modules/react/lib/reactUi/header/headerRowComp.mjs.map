{"version":3,"sources":["reactUi/header/headerRowComp.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAoG,aAAa,EAAqB,MAAM,yBAAyB,CAAC;AAC7K,OAAO,KAAK,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC5E,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EAAE,WAAW,EAAE,uBAAuB,EAAE,MAAM,UAAU,CAAC;AAEhE,MAAM,aAAa,GAAG,CAAC,KAA4B,EAAE,EAAE;IAEnD,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IAEvB,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3E,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;IAC5C,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAE3C,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;IAEzD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAS,GAAG,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;IACrE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAS,GAAG,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;IAC/D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAA2B,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IAElG,MAAM,IAAI,GAAG,MAAM,CAAwB,IAAI,CAAC,CAAC;IAEjD,MAAM,MAAM,GAAG,WAAW,CAAC,CAAC,CAAiB,EAAE,EAAE;QAC7C,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,EAAE;YACJ,OAAO;SACV;QAED,MAAM,SAAS,GAAmB;YAC9B,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC;YACtC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC;YAC1B,cAAc,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE;gBAC/C,WAAW,CAAC,WAAW,EAAE,GAAG,EAAE;oBAC1B,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,uBAAuB,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,CAAE,CAAC,CAAA;gBAC3E,CAAC,CAAC,CAAC;YACP,CAAC;YACD,QAAQ,EAAE,KAAK,CAAC,EAAE;gBACd,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;iBACpC;YACL,CAAC;SACJ,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,KAAK,GAAG,OAAO,CAAE,GAAE,EAAE,CAAC,CAAC;QACzB,SAAS,EAAE,SAAS;QACpB,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,GAAG;KACX,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;IAG9B,MAAM,aAAa,GAAG,WAAW,CAAE,CAAC,QAAgC,EAAE,EAAE;QACpE,QAAQ,IAAI,CAAC,OAAO,EAAE,EAAE;YACpB,KAAK,aAAa,CAAC,YAAY;gBAC3B,OAAO,oBAAC,mBAAmB,IAAC,IAAI,EAAE,QAA+B,EAAE,GAAG,EAAE,QAAQ,CAAC,aAAa,EAAE,GAAI,CAAC;YAEzG,KAAK,aAAa,CAAC,eAAe;gBAC9B,OAAO,oBAAC,oBAAoB,IAAC,IAAI,EAAE,QAAgC,EAAE,GAAG,EAAE,QAAQ,CAAC,aAAa,EAAE,GAAI,CAAC;YAE3G;gBACI,OAAO,oBAAC,cAAc,IAAC,IAAI,EAAE,QAA0B,EAAE,GAAG,EAAE,QAAQ,CAAC,aAAa,EAAE,GAAI,CAAC;SAClG;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CACH,6BAAK,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAC,KAAK,EAAC,KAAK,EAAE,KAAK,mBAAiB,YAAY,IACtF,SAAS,CAAC,GAAG,CAAE,aAAa,CAAE,CAC9B,CACT,CAAC;AACN,CAAC,CAAC;AAEF,eAAe,IAAI,CAAC,aAAa,CAAC,CAAC","file":"headerRowComp.mjs","sourcesContent":["import { AbstractHeaderCellCtrl, HeaderGroupCellCtrl, HeaderCellCtrl, HeaderFilterCellCtrl, HeaderRowCtrl, HeaderRowType, IHeaderRowComp, _ } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useMemo, useRef, useState } from 'react';\nimport HeaderCellComp from './headerCellComp';\nimport HeaderGroupCellComp from './headerGroupCellComp';\nimport HeaderFilterCellComp from './headerFilterCellComp';\nimport { agFlushSync, getNextValueIfDifferent } from '../utils';\n\nconst HeaderRowComp = (props: {ctrl: HeaderRowCtrl}) => {\n\n    const { ctrl } = props;\n\n    const { topOffset, rowHeight } = useMemo(() => ctrl.getTopAndHeight(), []);\n    const ariaRowIndex = ctrl.getAriaRowIndex();\n    const className = ctrl.getHeaderRowClass();\n\n    const transform = useMemo(() => ctrl.getTransform(), []);\n\n    const [height, setHeight] = useState<string>(() => rowHeight + 'px');\n    const [top, setTop] = useState<string>(() => topOffset + 'px');\n    const [cellCtrls, setCellCtrls] = useState<AbstractHeaderCellCtrl[]>(() => ctrl.getHeaderCtrls());\n\n    const eGui = useRef<HTMLDivElement | null>(null);\n\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n        if (!e) {\n            return;\n        }\n\n        const compProxy: IHeaderRowComp = {\n            setHeight: height => setHeight(height),\n            setTop: top => setTop(top),\n            setHeaderCtrls: (ctrls, forceOrder, afterScroll) =>{\n                agFlushSync(afterScroll, () => {\n                    setCellCtrls(prev => getNextValueIfDifferent(prev, ctrls, forceOrder)!)\n                });\n            },\n            setWidth: width => {\n                if (eGui.current) {\n                    eGui.current.style.width = width;\n                }\n            },\n        };\n\n        ctrl.setComp(compProxy, false);\n    }, []);\n\n    const style = useMemo( ()=> ({\n        transform: transform,\n        height: height,\n        top: top,\n    }), [transform, height, top]);\n\n\n    const createCellJsx = useCallback( (cellCtrl: AbstractHeaderCellCtrl) => {\n        switch (ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP :\n                return <HeaderGroupCellComp ctrl={cellCtrl as HeaderGroupCellCtrl} key={cellCtrl.getInstanceId()} />;\n\n            case HeaderRowType.FLOATING_FILTER :\n                return <HeaderFilterCellComp ctrl={cellCtrl as HeaderFilterCellCtrl} key={cellCtrl.getInstanceId()} />;\n                \n            default :\n                return <HeaderCellComp ctrl={cellCtrl as HeaderCellCtrl} key={cellCtrl.getInstanceId()} />;\n        }\n    }, []);\n\n    return (\n        <div ref={setRef} className={className} role=\"row\" style={style} aria-rowindex={ariaRowIndex}>\n            { cellCtrls.map( createCellJsx ) }\n        </div>\n    );\n};\n\nexport default memo(HeaderRowComp);\n"]}