{"version":3,"sources":["reactUi/rows/rowComp.tsx"],"names":[],"mappings":"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","file":"rowComp.mjs","sourcesContent":["import React, { useEffect, useRef, useState, useMemo, memo, useContext, useLayoutEffect, useCallback } from 'react';\nimport { CellCtrl, RowContainerType, IRowComp, RowCtrl, UserCompDetails, ICellRenderer, CssClassManager, RowStyle } from '@ag-grid-community/core';\nimport { showJsComp } from '../jsComp';\nimport { isComponentStateless, getNextValueIfDifferent, agFlushSync } from '../utils';\nimport { BeansContext } from '../beansContext';\nimport CellComp from '../cells/cellComp';\n\nconst RowComp = (params: { rowCtrl: RowCtrl, containerType: RowContainerType }) => {\n\n    const { context } = useContext(BeansContext);\n    const { rowCtrl, containerType } = params;\n\n    const tabIndex = rowCtrl.getTabIndex();\n    const domOrderRef = useRef<boolean>(rowCtrl.getDomOrder());\n    const isFullWidth = rowCtrl.isFullWidth();\n    \n    // Flag used to avoid problematic initialState setter funcs being called on a dead / non displayed row. \n    // Due to async rendering its possible for the row to be destroyed before React has had a chance to render it.\n    const isDisplayed = rowCtrl.getRowNode().displayed; \n    const [rowIndex, setRowIndex] = useState<string | null>(() => isDisplayed ? rowCtrl.getRowIndex() : null);\n    const [rowId, setRowId] = useState<string | null>(() => rowCtrl.getRowId());\n    const [rowBusinessKey, setRowBusinessKey] = useState<string | null>(() => rowCtrl.getBusinessKey());\n\n    const [userStyles, setUserStyles] = useState<RowStyle | undefined>(() => rowCtrl.getRowStyles());\n    const [cellCtrls, setCellCtrls] = useState<CellCtrl[] | null>(() => null);\n    const [fullWidthCompDetails, setFullWidthCompDetails] = useState<UserCompDetails>();\n\n    // these styles have initial values, so element is placed into the DOM with them,\n    // rather than an transition getting applied.\n    const [top, setTop] = useState<string | undefined>(() => isDisplayed ? rowCtrl.getInitialRowTop(containerType) : undefined);\n    const [transform, setTransform] = useState<string | undefined>(() => isDisplayed ? rowCtrl.getInitialTransform(containerType) : undefined);\n\n    const eGui = useRef<HTMLDivElement | null>(null);\n    const fullWidthCompRef = useRef<ICellRenderer>();\n\n    const autoHeightSetup = useRef<boolean>(false);\n    const [autoHeightSetupAttempt, setAutoHeightSetupAttempt] = useState<number>(0);\n\n    // puts autoHeight onto full with detail rows. this needs trickery, as we need\n    // the HTMLElement for the provided Detail Cell Renderer, however the Detail Cell Renderer\n    // could be a stateless React Func Comp which won't work with useRef, so we need\n    // to poll (we limit to 10) looking for the Detail HTMLElement (which will be the only\n    // child) after the fullWidthCompDetails is set.\n    // I think this looping could be avoided if we use a ref Callback instead of useRef,\n    useEffect(() => {\n        if (autoHeightSetup.current) { return; }\n        if (!fullWidthCompDetails) { return; }\n        if (autoHeightSetupAttempt > 10) { return; }\n\n        const eChild = eGui.current?.firstChild as HTMLElement;\n        if (eChild) {\n            rowCtrl.setupDetailRowAutoHeight(eChild);\n            autoHeightSetup.current = true;\n        } else {\n            setAutoHeightSetupAttempt(prev => prev + 1);\n        }\n\n    }, [fullWidthCompDetails, autoHeightSetupAttempt]);\n\n    let cssClassManager = useRef<CssClassManager>();\n    if(!cssClassManager.current){\n        cssClassManager.current = new CssClassManager(() => eGui.current);\n    }\n    const setRef = useCallback((e: HTMLDivElement) => {\n        eGui.current = e;\n\n        if (!eGui.current) {\n            rowCtrl.unsetComp(containerType);\n            return;\n        }\n        \n        // because React is asynchronous, it's possible the RowCtrl is no longer a valid RowCtrl. This can\n        // happen if user calls two API methods one after the other, with the second API invalidating the rows\n        // the first call created. Thus the rows for the first call could still get created even though no longer needed.\n        if (!rowCtrl.isAlive()) { return; }\n        \n        const compProxy: IRowComp = {\n            // the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)\n            // as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.\n            setTop,\n            setTransform,\n\n            // i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of\n            // React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.\n            addOrRemoveCssClass: (name, on) => cssClassManager.current!.addOrRemoveCssClass(name, on),\n\n            setDomOrder: domOrder => domOrderRef.current = domOrder,\n            setRowIndex,\n            setRowId,\n            setRowBusinessKey,\n            setUserStyles,\n            // if we don't maintain the order, then cols will be ripped out and into the dom\n            // when cols reordered, which would stop the CSS transitions from working\n            setCellCtrls: (next, useFlushSync) => {\n                agFlushSync(useFlushSync, () => {\n                    setCellCtrls(prev => getNextValueIfDifferent(prev, next, domOrderRef.current));\n                });\n            },\n            showFullWidth: compDetails => setFullWidthCompDetails(compDetails),\n            getFullWidthCellRenderer: () => fullWidthCompRef.current,\n        };\n        rowCtrl.setComp(compProxy, eGui.current, containerType);\n\n    }, []);\n\n    useLayoutEffect(() => showJsComp(fullWidthCompDetails, context, eGui.current!, fullWidthCompRef), [fullWidthCompDetails]);\n\n    const rowStyles = useMemo(() => {\n        const res = { top, transform };\n\n        Object.assign(res, userStyles);\n        return res;\n    }, [top, transform, userStyles]);\n\n    const showFullWidthFramework = isFullWidth && fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n    const showCells = !isFullWidth && cellCtrls != null;\n\n    const reactFullWidthCellRendererStateless = useMemo(() => {\n        const res = fullWidthCompDetails?.componentFromFramework && isComponentStateless(fullWidthCompDetails.componentClass);\n        return !!res;\n    }, [fullWidthCompDetails]);\n\n    const showCellsJsx = () => cellCtrls?.map(cellCtrl => (\n        <CellComp\n            cellCtrl={cellCtrl}\n            editingRow={rowCtrl.isEditing()}\n            printLayout={rowCtrl.isPrintLayout()}\n            key={cellCtrl.getInstanceId()}\n        />\n    ));\n\n    const showFullWidthFrameworkJsx = () => {\n        const FullWidthComp = fullWidthCompDetails!.componentClass;\n        return (\n            <>\n                {\n                    reactFullWidthCellRendererStateless\n                    && <FullWidthComp  {...fullWidthCompDetails!.params} />\n                }\n                {\n                    !reactFullWidthCellRendererStateless\n                    && <FullWidthComp  {...fullWidthCompDetails!.params} ref={fullWidthCompRef} />\n                }\n            </>\n        );\n    };\n\n    return (\n        <div\n            ref={setRef}\n            role={'row'}\n            style={rowStyles}\n            row-index={ rowIndex }\n            row-id={ rowId }\n            row-business-key={ rowBusinessKey }\n            tabIndex={tabIndex}\n        >\n            {showCells && showCellsJsx()}\n            {showFullWidthFramework && showFullWidthFrameworkJsx()}\n        </div>\n    );\n};\n\nexport default memo(RowComp);\n"]}