{"version":3,"sources":["reactUi/utils.tsx"],"names":[],"mappings":"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","file":"utils.mjs","sourcesContent":["import ReactDOM from \"react-dom\";\n\nexport const classesList = (...list: (string | null | undefined)[]): string => {\n    const filtered = list.filter( s => s != null && s !== '');\n\n    return filtered.join(' ');\n}\n\nexport class CssClasses {\n\n    private classesMap: {[name: string]: boolean} = {};\n\n    constructor(...initialClasses: string[]) {\n        initialClasses.forEach(className => {\n            this.classesMap[className] = true;\n        });\n    }\n\n    public setClass(className: string, on: boolean): CssClasses {\n        // important to not make a copy if nothing has changed, so react\n        // won't trigger a render cycle on new object instance\n        const nothingHasChanged = !!this.classesMap[className] == on;\n        if (nothingHasChanged) { return this; }\n\n        const res = new CssClasses();\n        res.classesMap = {...this.classesMap};\n        res.classesMap[className] = on;\n        return res;\n    }\n\n    public toString(): string {\n        const res = Object.keys(this.classesMap).filter(key => this.classesMap[key]).join(' ');\n        return res;\n    }\n\n}\n\nexport const isComponentStateless = (Component: any) => {\n    const hasSymbol = () => typeof Symbol === 'function' && Symbol.for;\n    const getMemoType = () => hasSymbol() ? Symbol.for('react.memo') : 0xead3;\n\n    return (\n            typeof Component === 'function' && !(Component.prototype && Component.prototype.isReactComponent)\n        ) || (typeof Component === 'object' && Component.$$typeof === getMemoType());\n}\n\n// CreateRoot is only available from React 18, which if used requires us to use flushSync.\nconst createRootAndFlushSyncAvailable = (ReactDOM as any).createRoot != null && (ReactDOM as any).flushSync != null;\n\n/**\n * Wrapper around flushSync to provide backwards compatibility with React 16-17\n * Also allows us to control via the `useFlushSync` param whether we want to use flushSync or not\n * as we do not want to use flushSync when we are likely to already be in a render cycle\n */\nexport const agFlushSync = (useFlushSync: boolean, fn: () => void) => {\n    if (createRootAndFlushSyncAvailable && useFlushSync) {\n        (ReactDOM as any).flushSync(fn);\n    } else {\n        fn();\n    }\n}\n\n/**\n * The aim of this function is to maintain references to prev or next values where possible.\n * If there are not real changes then return the prev value to avoid unnecessary renders.\n * @param maintainOrder If we want to maintain the order of the elements in the dom in line with the next array\n * @returns \n */\nexport function getNextValueIfDifferent<T extends { getInstanceId: () => string }>(prev: T[] | null, next: T[] | null, maintainOrder: boolean): T[] | null {\n    if (next == null || prev == null) {\n        return next;\n    }\n\n    // If same array instance nothing to do.\n    // If both empty arrays maintain reference of prev.\n    if (prev === next || (next.length === 0 && prev.length === 0)) {\n        return prev;\n    }\n\n    // If maintaining dom order just return next\n    // If prev is empty just return next immediately as no previous order to maintain\n    // If prev was not empty but next is empty return next immediately\n    if (maintainOrder || (prev.length === 0 && next.length > 0) || (prev.length > 0 && next.length === 0)) {\n        return next;\n    }\n\n    // if dom order not important, we don't want to change the order\n    // of the elements in the dom, as this would break transition styles\n    const oldValues: T[] = [];\n    const newValues: T[] = [];\n    const prevMap: Map<string, T> = new Map();\n    const nextMap: Map<string, T> = new Map();\n\n    for (let i = 0; i < next.length; i++) {\n        const c = next[i];\n        nextMap.set(c.getInstanceId(), c);\n    }\n    for (let i = 0; i < prev.length; i++) {\n        const c = prev[i];\n        prevMap.set(c.getInstanceId(), c);\n        if(nextMap.has(c.getInstanceId())){\n            oldValues.push(c);\n        }\n    }\n\n    for (let i = 0; i < next.length; i++) {\n        const c = next[i];\n        const instanceId = c.getInstanceId();\n\n        if (!prevMap.has(instanceId)) {\n            newValues.push(c);\n        }\n    }\n\n    // All the same values exist just maybe in a different order so maintain the existing reference\n    if (oldValues.length === prev.length && newValues.length === 0) {\n        return prev;\n    }\n\n    // All new values so avoid spreading the new array to maintain the reference\n    if (oldValues.length === 0 && newValues.length === next.length) {\n        return next;\n    }\n    // Spread as we need to combine the old and new values\n    return [...oldValues, ...newValues];\n}\n\n"]}