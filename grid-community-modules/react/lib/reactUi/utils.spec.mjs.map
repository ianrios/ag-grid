{"version":3,"sources":["reactUi/utils.spec.tsx"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+CK","file":"utils.spec.mjs","sourcesContent":["/* import { describe, expect, xtest, test, jest, beforeEach, afterEach } from '@jest/globals'; \n\nimport { getNextValueIfDifferent } from './utils';\n\nconst makeItem = (id: number) => ({ id, getInstanceId: () => id.toString() });\nconst toCompareStr = (arr: any[]) => arr.map(item => item.id).join(',');\n\ndescribe('utils', () => {\n\n    test('return prev ref if no difference ignoring order', () => {\n\n        const prev = [1, 2, 3, 4, 5].map(makeItem);\n        const next = [5, 3, 2, 1, 4].map(makeItem);\n\n        const result = getNextValueIfDifferent(prev, next, false);\n        expect(result).toBe(prev);\n\n        const resultDomOrder = getNextValueIfDifferent(prev, next, true);\n        expect(resultDomOrder).toBe(next);\n    });\n\n\n    test('maintain source order of prev when some old items and some new', () => {\n\n        const prev = [1, 2, 3].map(makeItem);\n        const next = [5, 3, 2, 1, 4].map(makeItem);\n\n        const result = getNextValueIfDifferent(prev, next, false)!;\n        expect(toCompareStr(result)).toEqual('1,2,3,5,4');\n\n        const resultDomOrder = getNextValueIfDifferent(prev, next, true)!;\n        // just return next \n        expect(resultDomOrder).toBe(next);\n    });\n\n    test('maintain next ref when all new', () => {\n\n        const prev = [1, 2, 3].map(makeItem);\n        const next = [5, 4, 6].map(makeItem);\n\n        const result = getNextValueIfDifferent(prev, next, false)!;\n        expect(result).toBe(next);\n\n        const resultDomOrder = getNextValueIfDifferent(prev, next, true)!;\n        expect(resultDomOrder).toBe(next);\n    });\n});\n   */"]}