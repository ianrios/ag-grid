--- 
title: "Quick Start" 
---

Create a grid in 60 Seconds

At a minimum, three things are required to create a grid:

- **Container:** for the grids placement in your application.
- **Styles:** to define the grid's theme & dimensions.
- **Row Data & Column Definitions:** to define the data and how it should be displayed.

{% if isNotJavascriptFramework() %}

## Install

{% /if %}

{% if isFramework("react") %}

<!-- Install React -->

First, install the `ag-grid-react` library:

```bash
npm install ag-grid-react
```

{% /if %}


{% if isFramework("angular") %}

<!-- Install Angular -->

First, install the `ag-grid-angular` library:

```bash
npm install ag-grid-angular
```

{% /if %}

{% if isFramework("vue") %}

<!-- Install Vue3 -->

First, install the `ag-grid-vue3` library:

```bash
npm install ag-grid-vue3
```

{% /if %}

{% if isFramework("javascript") %}

## Providing a Container

<!-- Create JavaScript -->

First, load the AG Grid library and create a blank container element which will be used to contain the grid:

```html
<html lang="en">
  <head>
    <!-- Includes all JS & CSS for AG Grid -->
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
  </head>
  <body>
    <!-- Your grid container -->
    <div id="myGrid"></div>
  </body>
</html>
```

## Instantiating the Grid

Then, create the grid inside of your container by calling `createGrid` on the agGrid package.

```jsx
// Grid Options: Contains all of the grid configurations
const gridOptions = {};

// Your Javascript code to create the grid
const myGridElement = document.querySelector('#myGrid');
agGrid.createGrid(myGridElement, gridOptions);
```

In this snippet, the grid is created using the `agGrid.createGrid()` method. This method takes two parameters:
- **Container:** The DOM element that the grid will be placed into.
- **Grid Options:** An object containing all of the grid's configuration options.

## Row Data & Column Definitions

Next, provide the grid with some data to display and some column definitions to define how to display it.

In the `gridOptions` object, add the following properties:

```jsx
// Grid Options: Contains all of the grid configurations
const gridOptions = {
  // Row Data: The data to be displayed.
  rowData: [
    { make: "Tesla", model: "Model Y", price: 64950, electric: true },
    { make: "Ford", model: "F-Series", price: 33850, electric: false },
    { make: "Toyota", model: "Corolla", price: 29600, electric: false },
  ],
  // Column Definitions: Defines & controls grid columns.
  columnDefs: [
    { field: "make" },
    { field: "model" },
    { field: "price" },
    { field: "electric" }
  ]
};
```

This is a basic example of Row Data & Column Definitions. The column definitions will access data via the provided `field` property, which maps directly to fields inside of the `rowData` objects.

## Styling the Grid

Finally, add the `ag-theme-quartz` CSS class to your grid container element to apply the grid's theme. You should also set the grid's dimensions using CSS.

```html
<!-- Your grid container -->
<div id="myGrid" class="ag-theme-quartz" style="height: 500px"></div>
```

{% note %}
Other included themes can be found on the [Themes](./themes/) page.
{% /note %}

{% /if %}

{% if isFramework("react") %}

<!-- Create React -->

## Create a Component

Then, create a new component in your application with the required dependencies:

```jsx
import { AgGridReact } from 'ag-grid-react'; // React Grid Logic
import "ag-grid-community/styles/ag-grid.css"; // Core CSS
import "ag-grid-community/styles/ag-theme-quartz.css"; // Theme

const GridExample = () => {
  return (<div></div>);
}
```

## Row Data & Column Definitions

Next, add the `rowData` and `colDefs` arrays to your component to define the data and how it should be displayed:

```jsx
const GridExample = () => {
  // Row Data: The data to be displayed.
  const [rowData, setRowData] = useState([
    { make: "Tesla", model: "Model Y", price: 64950, electric: true },
    { make: "Ford", model: "F-Series", price: 33850, electric: false },
    { make: "Toyota", model: "Corolla", price: 29600, electric: false },
  ]);
  
  // Column Definitions: Defines & controls grid columns.
  const [colDefs, setColDefs] = useState([
    { field: "make" },
    { field: "model" },
    { field: "price" },
    { field: "electric" }
  ]);

  // ...

}
```

This is a basic example of Row Data & Column Definitions. The column definitions will access data via the provided `field` property, which maps directly to fields inside of the `rowData` objects.

## Rendering the Grid

Then, return the `AgGridReact` component (wrapped in a container div) with `rowData` and `colDefs` as props:

```jsx
return (
  // Container
  <div>
    {/* The AG Grid component */}
    <AgGridReact rowData={rowData} columnDefs={colDefs} />
  </div>
)
```

## Styling the Grid

Finally, configure the theme & dimensions for the grid, which are controlled by the grid's container element.

In the container `<div>` add the `ag-theme-quartz` CSS class to apply the Quartz theme and specify a height:

```jsx
// Container with theme & dimensions
<div className="ag-theme-quartz" style={{ height: 500 }}>
  {/* The AG Grid component */}
  <AgGridReact rowData={rowData} columnDefs={colDefs} />
</div>
```

{% note %}
Other included themes can be found on the [Themes](./themes/) page.
{% /note %}

{% /if %}

{% if isFramework("angular") %}

## Create a Component

Then, create a new component in your application with the required dependencies:

```jsx
import { Component } from '@angular/core';
import { AgGridAngular } from 'ag-grid-angular';
import { ColDef } from 'ag-grid-community'; // Column Definition Type Interface

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [AgGridAngular], // Add AG Grid component
  styleUrls: ['./app.component.css'],
  template: ``
})

export class AppComponent {}
```

## Row Data & Column Definitions

Next, add the `rowData` and `colDefs` arrays to your component to define the data and how it should be displayed:

```jsx
export class AppComponent {
  // Row Data: The data to be displayed.
  rowData = [
    { make: "Tesla", model: "Model Y", price: 64950, electric: true },
    { make: "Ford", model: "F-Series", price: 33850, electric: false },
    { make: "Toyota", model: "Corolla", price: 29600, electric: false },
  ];

  // Column Definitions: Defines & controls grid columns.
  colDefs: ColDef[] = [
    { field: "make" },
    { field: "model" },
    { field: "price" },
    { field: "electric" }
  ];
}
```

This is a basic example of Row Data & Column Definitions. The column definitions will access data via the provided `field` property, which maps directly to fields inside of the `rowData` objects.

## Rendering the Grid

Then, add the `ag-grid-angular` component to the template with `rowData` and `colDefs` as props:

```jsx
template:
`
  <!-- The AG Grid component -->
  <ag-grid-angular
    [rowData]="rowData"
    [columnDefs]="colDefs">
  </ag-grid-angular>
`
```

## Styling the Grid

Finally, configure the theme & dimensions for the grid. First, import the required dependencies into your `styles.css` file:

```css
/* Core Grid CSS */
@import 'ag-grid-community/styles/ag-grid.css';
/* Quartz Theme Specific CSS */
@import 'ag-grid-community/styles/ag-theme-quartz.css';
```

Then add the `class` and `style` props to the `ag-grid-angular` component to define the theme and dimensions for the grid:

```jsx
<ag-grid-angular
  class="ag-theme-quartz"
  style="height: 500px;"
  ...
>
</ag-grid-angular>
```

{% note %}
Other included themes can be found on the [Themes](./themes/) page.
{% /note %}

{% /if %}

{% if isFramework("vue") %}

## Create a Component

Then, create a new component in your application with the required dependencies:

```html
<template></template>

<script>
import { ref } from 'vue';
import "ag-grid-community/styles/ag-grid.css"; // Core CSS
import "ag-grid-community/styles/ag-theme-quartz.css"; // Theme
import { AgGridVue } from "ag-grid-vue3"; // Vue Grid Logic

export default {
  name: "App",
  components: {
    AgGridVue, // Add AG Grid Vue3 component
  },
  setup() {},
};
</script>
```

## Row Data & Column Definitions

Next, add the `rowData` and `colDefs` arrays to your component to define the data and how it should be displayed:

```js
setup() {
  // Row Data: The data to be displayed.
  const rowData = ref([
    { make: "Tesla", model: "Model Y", price: 64950, electric: true },
    { make: "Ford", model: "F-Series", price: 33850, electric: false },
    { make: "Toyota", model: "Corolla", price: 29600, electric: false },
  ]);

  // Column Definitions: Defines & controls grid columns.
  const colDefs = ref([
    { field: "make" },
    { field: "model" },
    { field: "price" },
    { field: "electric" }
  ]);

  return {
    rowData,
    colDefs,
  };
},
```

This is a basic example of Row Data & Column Definitions. The column definitions will access data via the provided `field` property, which maps directly to fields inside of the `rowData` objects.

## Rendering the Grid

Then, add the `ag-grid-vue` component to the component template with `rowData` and `colDefs` as props:

```html
<template>
  <!-- The AG Grid component -->
  <ag-grid-vue
    :rowData="rowData"
    :columnDefs="colDefs"
  >
  </ag-grid-vue>
</template>
```

## Styling the Grid

Finally, configure the theme & dimensions for the grid by adding the class and style props to the `ag-grid-vue` component to define the theme and dimensions for the grid:

```html
<template>
  <!-- The AG Grid component -->
  <ag-grid-vue
    style="height: 500px"
    class="ag-theme-quartz"
    // ...
  >
  </ag-grid-vue>
</template>
```

{% note %}
Other included themes can be found on the [Themes](./themes/) page.
{% /note %}

{% /if %}

## Result

When you run your application, you should see a basic grid with three rows. To see the full code, click the `</> Code` button below the example.

<grid-example title='Quick Start Example' name='quick-start-example' type='mixed' options='{ "exampleHeight": 350 }'></grid-example>

{% note %}
To live-edit the code, open the example in CodeSandbox or Plunkr using the buttons to the lower-right.
{% /note %}

## Next Steps

- Read our [Introductory Tutorial](./deep-dive).
- Watch our [Video Tutorials](./videos).
